<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Live Collaboration Dashboard - CTS VibeApp</title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        .live-dashboard {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 20px;
            padding: 20px;
        }
        
        .live-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            animation: pulse 2s infinite;
        }
        
        .live-card.active-users { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }
        .live-card.velocity { background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); }
        .live-card.alerts { background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%); }
        
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.02); }
            100% { transform: scale(1); }
        }
        
        .user-status {
            display: flex;
            align-items: center;
            margin: 10px 0;
            padding: 10px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 8px;
        }
        
        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 10px;
        }
        
        .status-indicator.coding { background: #4ade80; }
        .status-indicator.in_meeting { background: #f59e0b; }
        .status-indicator.break { background: #ef4444; }
        .status-indicator.reviewing { background: #8b5cf6; }
        
        .metric-value {
            font-size: 2.5rem;
            font-weight: bold;
            margin: 10px 0;
        }
        
        .alert-item {
            padding: 8px;
            margin: 5px 0;
            border-radius: 5px;
            background: rgba(255, 255, 255, 0.1);
        }
        
        .alert-item.success { border-left: 4px solid #4ade80; }
        .alert-item.warning { border-left: 4px solid #f59e0b; }
        .alert-item.info { border-left: 4px solid #3b82f6; }
        
        .skills-matrix {
            grid-column: span 3;
            background: white;
            border-radius: 15px;
            padding: 20px;
            margin-top: 20px;
        }
        
        .skill-bar {
            display: flex;
            align-items: center;
            margin: 10px 0;
        }
        
        .skill-name {
            width: 120px;
            font-weight: 600;
        }
        
        .skill-progress {
            flex: 1;
            height: 8px;
            background: #e5e7eb;
            border-radius: 4px;
            margin: 0 10px;
            overflow: hidden;
        }
        
        .skill-fill {
            height: 100%;
            background: linear-gradient(90deg, #667eea, #764ba2);
            border-radius: 4px;
            transition: width 0.5s ease;
        }
        
        .workload-optimizer {
            grid-column: span 3;
            background: white;
            border-radius: 15px;
            padding: 20px;
            margin-top: 20px;
        }
        
        .workload-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            margin: 10px 0;
            border-radius: 10px;
            background: #f8fafc;
        }
        
        .workload-item.overloaded { background: #fef2f2; border-left: 4px solid #ef4444; }
        .workload-item.optimal { background: #f0fdf4; border-left: 4px solid #22c55e; }
        .workload-item.underutilized { background: #fefce8; border-left: 4px solid #eab308; }
        
        .auto-refresh {
            position: fixed;
            top: 20px;
            right: 20px;
            background: #667eea;
            color: white;
            padding: 10px 20px;
            border-radius: 25px;
            border: none;
            cursor: pointer;
            font-weight: 600;
        }
        
        .loading {
            opacity: 0.6;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <nav style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 1rem;">
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <h1>üöÄ Live Collaboration Dashboard</h1>
            <div>
                <a href="/" style="color: white; margin: 0 10px;">Home</a>
                <a href="/dashboard" style="color: white; margin: 0 10px;">Dashboard</a>
                <a href="/live-dashboard" style="color: white; margin: 0 10px; text-decoration: underline;">Live</a>
            </div>
        </div>
    </nav>

    <button class="auto-refresh" onclick="toggleAutoRefresh()">üîÑ Auto Refresh: ON</button>

    <div class="live-dashboard">
        <!-- Active Users Card -->
        <div class="live-card active-users">
            <h3>üë• Team Activity</h3>
            <div id="activeUsers">
                <div class="loading">Loading team activity...</div>
            </div>
        </div>

        <!-- Team Velocity Card -->
        <div class="live-card velocity">
            <h3>‚ö° Today's Velocity</h3>
            <div id="teamVelocity">
                <div class="loading">Loading velocity data...</div>
            </div>
        </div>

        <!-- System Alerts Card -->
        <div class="live-card alerts">
            <h3>üîî Live Alerts</h3>
            <div id="systemAlerts">
                <div class="loading">Loading alerts...</div>
            </div>
        </div>

        <!-- Skills Matrix Section -->
        <div class="skills-matrix">
            <h3>üéØ Team Skills Matrix & Development</h3>
            <div id="skillsMatrix">
                <div class="loading">Loading skills data...</div>
            </div>
        </div>

        <!-- Workload Optimizer Section -->
        <div class="workload-optimizer">
            <h3>‚öñÔ∏è Smart Workload Distribution</h3>
            <div id="workloadOptimizer">
                <div class="loading">Loading workload data...</div>
            </div>
        </div>
    </div>

    <script>
        let autoRefresh = true;
        let refreshInterval;

        function toggleAutoRefresh() {
            autoRefresh = !autoRefresh;
            const button = document.querySelector('.auto-refresh');
            button.textContent = `üîÑ Auto Refresh: ${autoRefresh ? 'ON' : 'OFF'}`;
            
            if (autoRefresh) {
                startAutoRefresh();
            } else {
                clearInterval(refreshInterval);
            }
        }

        function startAutoRefresh() {
            refreshInterval = setInterval(() => {
                loadLiveData();
            }, 5000); // Refresh every 5 seconds
        }

        async function loadLiveData() {
            try {
                // Load active users
                const liveResponse = await fetch('/api/live-updates');
                const liveData = await liveResponse.json();
                updateActiveUsers(liveData.active_users);
                updateTeamVelocity(liveData.team_velocity);
                updateSystemAlerts(liveData.system_alerts);

                // Load skills matrix
                const skillsResponse = await fetch('/api/skills-matrix');
                const skillsData = await skillsResponse.json();
                updateSkillsMatrix(skillsData);

                // Load workload data
                const workloadResponse = await fetch('/api/workload-optimizer');
                const workloadData = await workloadResponse.json();
                updateWorkloadOptimizer(workloadData);

            } catch (error) {
                console.error('Error loading live data:', error);
            }
        }

        function updateActiveUsers(users) {
            const container = document.getElementById('activeUsers');
            container.innerHTML = users.map(user => `
                <div class="user-status">
                    <div class="status-indicator ${user.status}"></div>
                    <div>
                        <strong>${user.name}</strong><br>
                        <small>${user.activity}</small>
                    </div>
                </div>
            `).join('');
        }

        function updateTeamVelocity(velocity) {
            const container = document.getElementById('teamVelocity');
            container.innerHTML = `
                <div class="metric-value">${velocity.story_points_completed_today}</div>
                <div>Story Points Today</div>
                <hr style="margin: 15px 0; border-color: rgba(255,255,255,0.3);">
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; font-size: 0.9rem;">
                    <div>üêõ Bugs: ${velocity.bugs_resolved_today}</div>
                    <div>üíª Commits: ${velocity.commits_pushed_today}</div>
                    <div>üß™ Tests: ${velocity.tests_written_today}</div>
                    <div>üìä Total: ${velocity.story_points_completed_today + velocity.bugs_resolved_today}</div>
                </div>
            `;
        }

        function updateSystemAlerts(alerts) {
            const container = document.getElementById('systemAlerts');
            container.innerHTML = alerts.map(alert => `
                <div class="alert-item ${alert.type}">
                    <div>${alert.message}</div>
                    <small>${alert.time}</small>
                </div>
            `).join('');
        }

        function updateSkillsMatrix(data) {
            const container = document.getElementById('skillsMatrix');
            let html = '<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px;">';
            
            data.team_skills.forEach(member => {
                html += `
                    <div style="border: 1px solid #e5e7eb; border-radius: 10px; padding: 15px;">
                        <h4 style="color: #667eea; margin-bottom: 15px;">${member.employee}</h4>
                        ${Object.entries(member.skills).map(([skill, level]) => `
                            <div class="skill-bar">
                                <div class="skill-name">${skill}</div>
                                <div class="skill-progress">
                                    <div class="skill-fill" style="width: ${level}%"></div>
                                </div>
                                <div style="width: 40px; text-align: right; font-weight: 600;">${level}%</div>
                            </div>
                        `).join('')}
                        <div style="margin-top: 10px; font-size: 0.8rem; color: #6b7280;">
                            üìö Learning: ${member.learning_goals.join(', ')}
                        </div>
                    </div>
                `;
            });
            
            html += '</div>';
            container.innerHTML = html;
        }

        function updateWorkloadOptimizer(data) {
            const container = document.getElementById('workloadOptimizer');
            let html = '<div style="margin-bottom: 20px;"><h4>Current Team Workload</h4>';
            
            data.current_distribution.forEach(member => {
                const status = member.current_load > member.optimal_load + 10 ? 'overloaded' : 
                             member.current_load < member.optimal_load - 10 ? 'underutilized' : 'optimal';
                
                html += `
                    <div class="workload-item ${status}">
                        <div>
                            <strong>${member.employee}</strong><br>
                            <small>${member.tasks} tasks ‚Ä¢ ${member.hours_this_week}h this week</small>
                        </div>
                        <div style="text-align: right;">
                            <div style="font-size: 1.5rem; font-weight: bold;">${member.current_load}%</div>
                            <small>Target: ${member.optimal_load}%</small>
                        </div>
                    </div>
                `;
            });
            
            html += '</div><div><h4>üîß Optimization Suggestions</h4>';
            data.optimization_suggestions.forEach(suggestion => {
                html += `
                    <div style="background: #f0f9ff; border: 1px solid #0ea5e9; border-radius: 8px; padding: 15px; margin: 10px 0;">
                        <strong>üí° ${suggestion.action.replace('_', ' ').toUpperCase()}</strong><br>
                        ${suggestion.action === 'redistribute' ? 
                            `Move "${suggestion.task}" from ${suggestion.from} to ${suggestion.to}` :
                            `${suggestion.employee}: ${suggestion.suggestion}`
                        }<br>
                        <small style="color: #0ea5e9;">Impact: ${suggestion.impact || 'Improves team balance'}</small>
                    </div>
                `;
            });
            
            html += '</div>';
            container.innerHTML = html;
        }

        // Initialize the dashboard
        document.addEventListener('DOMContentLoaded', () => {
            loadLiveData();
            startAutoRefresh();
        });
    </script>
</body>
</html>
